38c38
< UniquePtr<Data_t> ptrs[kNumEntries];
---
> unique_ptr<Data_t> ptrs[kNumEntries];
68,74d67
<   char **argv = (char **)arg;
<   std::string ip_addr_port(argv[1]);
<   auto raddr = helpers::str_to_netaddr(ip_addr_port);
<   std::unique_ptr<FarMemManager> manager =
<       std::unique_ptr<FarMemManager>(FarMemManagerFactory::build(
<           kCacheSize, kNumGCThreads,
<           new TCPDevice(raddr, kNumConnections, kFarMemSize)));
76c69
<     ptrs[i] = std::move(manager->allocate_unique_ptr<Data_t>());
---
>     ptrs[i].reset(new Data_t());
85,86c78
<       auto *far_mem_ptr = &ptrs[idx];
<       const Data_t *raw_const_ptr = far_mem_ptr->deref(scope);
---
>       const Data_t *raw_const_ptr = ptrs[idx].get();
99,101d90
<   for (uint32_t i = 0; i < kNumEntries; i++) {
<     ptrs[i].free();
<   }
104c93
< int main(int _argc, char *argv[]) {
---
> int main(int argc, char *argv[]) {
107,108c96,97
<   if (_argc < 3) {
<     std::cerr << "usage: [cfg_file] [ip_addr:port]" << std::endl;
---
>   if (argc < 2) {
>     std::cerr << "usage: [cfg_file]" << std::endl;
112,118c101
<   char conf_path[strlen(argv[1]) + 1];
<   strcpy(conf_path, argv[1]);
<   for (int i = 2; i < _argc; i++) {
<     argv[i - 1] = argv[i];
<   }
< 
<   ret = runtime_init(conf_path, do_work, argv);
---
>   ret = runtime_init(argv[1], do_work, NULL);
